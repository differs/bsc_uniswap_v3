// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeEvents {
    #[prost(message, repeated, tag="1")]
    pub events: ::prost::alloc::vec::Vec<TradeEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trade {
    /// tokens
    #[prost(string, tag="1")]
    pub token_a_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_b_address: ::prost::alloc::string::String,
    /// user accounts
    #[prost(string, tag="3")]
    pub user_a_token_account_address: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub user_a_account_owner_address: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub user_b_token_account_address: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub user_b_account_owner_address: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub user_a_amount: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub user_b_amount: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub user_a_pre_amount: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub user_a_post_amount: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub user_b_pre_amount: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub user_b_post_amount: ::prost::alloc::string::String,
    /// tag
    #[prost(bool, tag="13")]
    pub was_original_direction: bool,
    /// pool
    #[prost(string, tag="200")]
    pub pool_address: ::prost::alloc::string::String,
    #[prost(string, tag="201")]
    pub vault_a: ::prost::alloc::string::String,
    #[prost(string, tag="202")]
    pub vault_b: ::prost::alloc::string::String,
    #[prost(string, tag="203")]
    pub vault_a_owner_address: ::prost::alloc::string::String,
    #[prost(string, tag="204")]
    pub vault_b_owner_address: ::prost::alloc::string::String,
    #[prost(string, tag="205")]
    pub vault_a_amount: ::prost::alloc::string::String,
    #[prost(string, tag="206")]
    pub vault_b_amount: ::prost::alloc::string::String,
    #[prost(string, tag="207")]
    pub vault_a_pre_amount: ::prost::alloc::string::String,
    #[prost(string, tag="208")]
    pub vault_b_pre_amount: ::prost::alloc::string::String,
    #[prost(string, tag="209")]
    pub vault_a_post_amount: ::prost::alloc::string::String,
    #[prost(string, tag="210")]
    pub vault_b_post_amount: ::prost::alloc::string::String,
    /// pool config
    #[prost(string, tag="230")]
    pub pool_config_address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BondingCurve {
    #[prost(string, tag="1")]
    pub virtual_quote_reserves: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub virtual_token_reserves: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub real_quote_reserves: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub real_token_reserves: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeEvent {
    #[prost(message, optional, tag="1")]
    pub instruction: ::core::option::Option<super::super::super::super::chainstream::v1::common::Instruction>,
    #[prost(message, optional, tag="2")]
    pub block: ::core::option::Option<super::super::super::super::chainstream::v1::common::Block>,
    #[prost(message, optional, tag="3")]
    pub transaction: ::core::option::Option<super::super::super::super::chainstream::v1::common::Transaction>,
    #[prost(message, optional, tag="4")]
    pub d_app: ::core::option::Option<super::super::super::super::chainstream::v1::common::DApp>,
    #[prost(message, optional, tag="100")]
    pub trade: ::core::option::Option<Trade>,
    #[prost(message, optional, tag="110")]
    pub bonding_curve: ::core::option::Option<BondingCurve>,
}
// @@protoc_insertion_point(module)
