// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(int64, tag="1")]
    pub timestamp: i64,
    #[prost(string, tag="2")]
    pub hash: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub height: u64,
    #[prost(uint64, tag="4")]
    pub slot: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(uint64, tag="1")]
    pub fee: u64,
    #[prost(string, tag="2")]
    pub fee_payer: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub index: u32,
    #[prost(string, tag="4")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub signer: ::prost::alloc::string::String,
    #[prost(enumeration="Status", tag="6")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DApp {
    #[prost(string, tag="1")]
    pub program_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub inner_program_address: ::prost::alloc::string::String,
    #[prost(enumeration="Chain", tag="3")]
    pub chain: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(uint32, tag="1")]
    pub index: u32,
    #[prost(bool, tag="2")]
    pub is_inner_instruction: bool,
    #[prost(uint32, tag="3")]
    pub inner_instruction_index: u32,
    #[prost(string, tag="4")]
    pub r#type: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Unspecified = 0,
    Success = 1,
    Failed = 2,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::Unspecified => "STATUS_UNSPECIFIED",
            Status::Success => "STATUS_SUCCESS",
            Status::Failed => "STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "STATUS_SUCCESS" => Some(Self::Success),
            "STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Chain {
    Unspecified = 0,
    Solana = 1,
    Ethereum = 2,
    Bsc = 3,
}
impl Chain {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Chain::Unspecified => "CHAIN_UNSPECIFIED",
            Chain::Solana => "CHAIN_SOLANA",
            Chain::Ethereum => "CHAIN_ETHEREUM",
            Chain::Bsc => "CHAIN_BSC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAIN_UNSPECIFIED" => Some(Self::Unspecified),
            "CHAIN_SOLANA" => Some(Self::Solana),
            "CHAIN_ETHEREUM" => Some(Self::Ethereum),
            "CHAIN_BSC" => Some(Self::Bsc),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
